using System;
using CoreGraphics;
using CoreLocation;
using Foundation;
using ObjCRuntime;
using UIKit;
using Google.Maps;

namespace Xamarin.iOS.Maps.Utils
{
	// @protocol GMUClusterItem <NSObject>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/
	[Protocol]
	[BaseType(typeof(NSObject))]
	interface GMUClusterItem
	{
		// @required @property (readonly, nonatomic) CLLocationCoordinate2D position;
		// // [Abstract]
		[Export("position")]
		CLLocationCoordinate2D Position { get; }
	}

	// @protocol GMUCluster <NSObject>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/
	[Protocol]
	[BaseType(typeof(NSObject))]
	interface GMUCluster
	{
		// @required @property (readonly, nonatomic) CLLocationCoordinate2D position;
		// // [Abstract]
		[Export("position")]
		CLLocationCoordinate2D Position { get; }

		// @required @property (readonly, nonatomic) NSUInteger count;
		// // [Abstract]
		[Export("count")]
		nuint Count { get; }

		// @required @property (readonly, nonatomic) NSArray<id<GMUClusterItem>> * _Nonnull items;
		// // [Abstract]
		[Export("items")]
		GMUClusterItem[] Items { get; }
	}

	// @protocol GMUClusterManagerDelegate <NSObject>
	[Protocol, Model(AutoGeneratedName = true)]
	[BaseType(typeof(NSObject))]
	interface GMUClusterManagerDelegate
	{
		// @optional -(BOOL)clusterManager:(GMUClusterManager * _Nonnull)clusterManager didTapCluster:(id<GMUCluster> _Nonnull)cluster;
		[Export("clusterManager:didTapCluster:")]
		bool DidTapCluster(GMUClusterManager clusterManager, GMUCluster cluster);

		// @optional -(BOOL)clusterManager:(GMUClusterManager * _Nonnull)clusterManager didTapClusterItem:(id<GMUClusterItem> _Nonnull)clusterItem;
		[Export("clusterManager:didTapClusterItem:")]
		bool DidTapClusterItem(GMUClusterManager clusterManager, GMUClusterItem clusterItem);
	}

	interface IGMUClusterManagerDelegate { }

	// @interface GMUClusterManager : NSObject
	[BaseType(typeof(NSObject))]
	[DisableDefaultCtor]
	interface GMUClusterManager
	{
		// -(instancetype _Nonnull)initWithMap:(id)mapView algorithm:(id _Nonnull)algorithm renderer:(id _Nonnull)renderer __attribute__((objc_designated_initializer));
		[Export("initWithMap:algorithm:renderer:")]
		[DesignatedInitializer]
		IntPtr Constructor(NSObject mapView, NSObject algorithm, NSObject renderer);

		// @property (readonly, nonatomic) id _Nonnull algorithm;
		[Export("algorithm")]
		NSObject Algorithm { get; }

		[Wrap("WeakDelegate")]
		[NullAllowed]
		IGMUClusterManagerDelegate Delegate { get; }

		// @property (readonly, nonatomic, weak) id<GMUClusterManagerDelegate> _Nullable delegate;
		[NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; }

		[Wrap("WeakMapDelegate")]
		[NullAllowed]
		NSObject MapDelegate { get; }

		// @property (readonly, nonatomic, weak) id _Nullable mapDelegate;
		[NullAllowed, Export("mapDelegate", ArgumentSemantic.Weak)]
		NSObject WeakMapDelegate { get; }

		// -(void)setDelegate:(id<GMUClusterManagerDelegate> _Nullable)delegate mapDelegate:(id _Nullable)mapDelegate;
		[Export("setDelegate:mapDelegate:")]
		void SetDelegate([NullAllowed] IGMUClusterManagerDelegate @delegate, [NullAllowed] NSObject mapDelegate);

		// -(void)addItem:(id<GMUClusterItem> _Nonnull)item;
		[Export("addItem:")]
		void AddItem(GMUClusterItem item);

		// -(void)addItems:(NSArray<id<GMUClusterItem>> * _Nonnull)items;
		[Export("addItems:")]
		void AddItems(GMUClusterItem[] items);

		// -(void)removeItem:(id<GMUClusterItem> _Nonnull)item;
		[Export("removeItem:")]
		void RemoveItem(GMUClusterItem item);

		// -(void)clearItems;
		[Export("clearItems")]
		void ClearItems();

		// -(void)cluster;
		[Export("cluster")]
		void Cluster();
	}

	// @interface Testing (GMUClusterManager)
	//[Category]
	//[BaseType(typeof(GMUClusterManager))]
	//interface GMUClusterManager_Testing
	//{
	//	// -(NSUInteger)clusterRequestCount;
	//	[Export("clusterRequestCount")]
	//	[Verify(MethodToProperty)]
	//	nuint ClusterRequestCount { get; }
	//}

	// @interface GMUStaticCluster : NSObject <GMUCluster>
	[BaseType(typeof(GMUCluster))]
	[DisableDefaultCtor]
	interface GMUStaticCluster
	{
		// -(instancetype _Nonnull)initWithPosition:(CLLocationCoordinate2D)position __attribute__((objc_designated_initializer));
		[Export("initWithPosition:")]
		[DesignatedInitializer]
		IntPtr Constructor(CLLocationCoordinate2D position);

		// @property (readonly, nonatomic) CLLocationCoordinate2D position;
		[Export("position")]
		CLLocationCoordinate2D Position { get; }

		// @property (readonly, nonatomic) NSUInteger count;
		[Export("count")]
		nuint Count { get; }

		// @property (readonly, nonatomic) NSArray<id<GMUClusterItem>> * _Nonnull items;
		[Export("items")]
		GMUClusterItem[] Items { get; }

		// -(void)addItem:(id<GMUClusterItem> _Nonnull)item;
		[Export("addItem:")]
		void AddItem(GMUClusterItem item);

		// -(void)removeItem:(id<GMUClusterItem> _Nonnull)item;
		[Export("removeItem:")]
		void RemoveItem(GMUClusterItem item);
	}

	// @interface GMUGeoJSONParser : NSObject
	[BaseType(typeof(NSObject))]
	interface GMUGeoJSONParser
	{
		// @property (readonly, nonatomic) NSArray<id<GMUGeometryContainer>> * _Nonnull features;
		[Export("features")]
		GMUGeometryContainer[] Features { get; }

		// -(instancetype _Nonnull)initWithURL:(NSURL * _Nonnull)url;
		[Export("initWithURL:")]
		IntPtr Constructor(NSUrl url);

		// -(instancetype _Nonnull)initWithData:(NSData * _Nonnull)data;
		[Export("initWithData:")]
		IntPtr Constructor(NSData data);

		// -(instancetype _Nonnull)initWithStream:(NSInputStream * _Nonnull)stream;
		[Export("initWithStream:")]
		IntPtr Constructor(NSInputStream stream);

		// -(void)parse;
		[Export("parse")]
		void Parse();
	}

	// @interface GMUGeometryRenderer : NSObject
	[BaseType(typeof(NSObject))]
	interface GMUGeometryRenderer
	{
		// -(instancetype _Nonnull)initWithMap:(id)map geometries:(NSArray<id<GMUGeometryContainer>> * _Nonnull)geometries;
		[Export("initWithMap:geometries:")]
		IntPtr Constructor(NSObject map, GMUGeometryContainer[] geometries);

		// -(instancetype _Nonnull)initWithMap:(id)map geometries:(NSArray<id<GMUGeometryContainer>> * _Nonnull)geometries styles:(NSArray * _Nullable)styles;
		[Export("initWithMap:geometries:styles:")]
		IntPtr Constructor(NSObject map, GMUGeometryContainer[] geometries, [NullAllowed] NSObject[] styles);

		// -(void)render;
		[Export("render")]
		void Render();

		// -(void)clear;
		[Export("clear")]
		void Clear();
	}

	// @interface Testing (GMUGeometryRenderer)
	//[Category]
	//[BaseType(typeof(GMUGeometryRenderer))]
	//interface GMUGeometryRenderer_Testing
	//{
	//	// -(NSArray *)mapOverlays;
	//	[Export("mapOverlays")]
	//	NSObject[] MapOverlays { get; }
	//}

	// @interface GMUKMLParser : NSObject
	[BaseType(typeof(NSObject))]
	interface GMUKMLParser
	{
		// @property (readonly, nonatomic) NSArray<id<GMUGeometryContainer>> * _Nonnull placemarks;
		[Export("placemarks")]
		GMUGeometryContainer[] Placemarks { get; }

		// @property (readonly, nonatomic) NSArray<GMUStyle *> * _Nonnull styles;
		[Export("styles")]
		GMUStyle[] Styles { get; }

		// -(void)parse;
		[Export("parse")]
		void Parse();

		// -(instancetype _Nonnull)initWithURL:(NSURL * _Nonnull)url;
		[Export("initWithURL:")]
		IntPtr Constructor(NSUrl url);

		// -(instancetype _Nonnull)initWithData:(NSData * _Nonnull)data;
		[Export("initWithData:")]
		IntPtr Constructor(NSData data);

		// -(instancetype _Nonnull)initWithStream:(NSInputStream * _Nonnull)stream;
		[Export("initWithStream:")]
		IntPtr Constructor(NSInputStream stream);
	}

	// @interface GMUGradient : NSObject
	[BaseType(typeof(NSObject))]
	interface GMUGradient
	{
		// @property (readonly, nonatomic) NSUInteger mapSize;
		[Export("mapSize")]
		nuint MapSize { get; }

		// @property (readonly, nonatomic) NSArray<UIColor *> * _Nonnull colors;
		[Export("colors")]
		UIColor[] Colors { get; }

		// @property (readonly, nonatomic) NSArray<NSNumber *> * _Nonnull startPoints;
		[Export("startPoints")]
		NSNumber[] StartPoints { get; }

		// -(instancetype _Nonnull)initWithColors:(NSArray<UIColor *> * _Nonnull)colors startPoints:(NSArray<NSNumber *> * _Nonnull)startPoints colorMapSize:(NSUInteger)mapSize;
		[Export("initWithColors:startPoints:colorMapSize:")]
		IntPtr Constructor(UIColor[] colors, NSNumber[] startPoints, nuint mapSize);

		// -(NSArray<UIColor *> * _Nonnull)generateColorMap;
		[Export("generateColorMap")]
		UIColor[] GenerateColorMap { get; }
	}

	// @interface GMUWeightedLatLng : NSObject
	[BaseType(typeof(NSObject))]
	interface GMUWeightedLatLng
	{
		// @property (readonly, nonatomic) float intensity;
		[Export("intensity")]
		float Intensity { get; }

		// -(instancetype _Nonnull)initWithCoordinate:(CLLocationCoordinate2D)coordinate intensity:(float)intensity;
		[Export("initWithCoordinate:intensity:")]
		IntPtr Constructor(CLLocationCoordinate2D coordinate, float intensity);
	}

	// @interface GMUHeatmapTileLayer
	interface GMUHeatmapTileLayer
	{
		// @property (copy, nonatomic) NSArray<GMUWeightedLatLng *> * _Nonnull weightedData;
		[Export("weightedData", ArgumentSemantic.Copy)]
		GMUWeightedLatLng[] WeightedData { get; set; }

		// @property (nonatomic) NSUInteger radius;
		[Export("radius")]
		nuint Radius { get; set; }

		// @property (nonatomic) GMUGradient * _Nonnull gradient;
		[Export("gradient", ArgumentSemantic.Assign)]
		GMUGradient Gradient { get; set; }
	}

	// @protocol GQTPointQuadTreeItem <NSObject>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/
	[Protocol]
	[BaseType(typeof(NSObject))]
	interface GQTPointQuadTreeItem
	{
		// @required -(GQTPoint)point;
		// // [Abstract]
		[Export("point")]
		GQTPoint Point { get; }
	}

	// @interface GQTPointQuadTree : NSObject
	[BaseType(typeof(NSObject))]
	interface GQTPointQuadTree
	{
		// -(id)initWithBounds:(GQTBounds)bounds;
		[Export("initWithBounds:")]
		IntPtr Constructor(GQTBounds bounds);

		// -(BOOL)add:(id<GQTPointQuadTreeItem>)item;
		[Export("add:")]
		bool Add(GQTPointQuadTreeItem item);

		// -(BOOL)remove:(id<GQTPointQuadTreeItem>)item;
		[Export("remove:")]
		bool Remove(GQTPointQuadTreeItem item);

		// -(void)clear;
		[Export("clear")]
		void Clear();

		// -(NSArray *)searchWithBounds:(GQTBounds)bounds;
		[Export("searchWithBounds:")]
		NSObject[] SearchWithBounds(GQTBounds bounds);

		// -(NSUInteger)count;
		[Export("count")]
		nuint Count { get; }
	}

	// @interface GQTPointQuadTreeChild : NSObject
	[BaseType(typeof(NSObject))]
	interface GQTPointQuadTreeChild
	{
		// -(void)add:(id<GQTPointQuadTreeItem>)item withOwnBounds:(GQTBounds)bounds atDepth:(NSUInteger)depth;
		[Export("add:withOwnBounds:atDepth:")]
		void Add(GQTPointQuadTreeItem item, GQTBounds bounds, nuint depth);

		// -(BOOL)remove:(id<GQTPointQuadTreeItem>)item withOwnBounds:(GQTBounds)bounds;
		[Export("remove:withOwnBounds:")]
		bool Remove(GQTPointQuadTreeItem item, GQTBounds bounds);

		// -(void)searchWithBounds:(GQTBounds)searchBounds withOwnBounds:(GQTBounds)ownBounds results:(NSMutableArray *)accumulator;
		[Export("searchWithBounds:withOwnBounds:results:")]
		void SearchWithBounds(GQTBounds searchBounds, GQTBounds ownBounds, NSMutableArray accumulator);

		// -(void)splitWithOwnBounds:(GQTBounds)ownBounds atDepth:(NSUInteger)depth;
		[Export("splitWithOwnBounds:atDepth:")]
		void SplitWithOwnBounds(GQTBounds ownBounds, nuint depth);
	}

	[BaseType(typeof(NSObject))]
	interface GMUGeometry
	{
		// @required @property (readonly, nonatomic) NSString * _Nonnull type;
		// [Abstract]
		[Export("type")]
		string Type { get; }
	}

	// @interface GMUStyle : NSObject
	[BaseType(typeof(NSObject))]
	interface GMUStyle
	{
		// @property (readonly, nonatomic) NSString * _Nonnull styleID;
		[Export("styleID")]
		string StyleID { get; }

		// @property (readonly, nonatomic) UIColor * _Nullable strokeColor;
		[NullAllowed, Export("strokeColor")]
		UIColor StrokeColor { get; }

		// @property (readonly, nonatomic) UIColor * _Nullable fillColor;
		[NullAllowed, Export("fillColor")]
		UIColor FillColor { get; }

		// @property (readonly, nonatomic) CGFloat width;
		[Export("width")]
		nfloat Width { get; }

		// @property (readonly, nonatomic) CGFloat scale;
		[Export("scale")]
		nfloat Scale { get; }

		// @property (readonly, nonatomic) CGFloat heading;
		[Export("heading")]
		nfloat Heading { get; }

		// @property (readonly, nonatomic) CGPoint anchor;
		[Export("anchor")]
		CGPoint Anchor { get; }

		// @property (readonly, nonatomic) NSString * _Nullable iconUrl;
		[NullAllowed, Export("iconUrl")]
		string IconUrl { get; }

		// @property (readonly, nonatomic) NSString * _Nullable title;
		[NullAllowed, Export("title")]
		string Title { get; }

		// @property (readonly, nonatomic) BOOL hasFill;
		[Export("hasFill")]
		bool HasFill { get; }

		// @property (readonly, nonatomic) BOOL hasStroke;
		[Export("hasStroke")]
		bool HasStroke { get; }

		// -(instancetype _Nonnull)initWithStyleID:(NSString * _Nonnull)styleID strokeColor:(UIColor * _Nullable)strokeColor fillColor:(UIColor * _Nullable)fillColor width:(CGFloat)width scale:(CGFloat)scale heading:(CGFloat)heading anchor:(CGPoint)anchor iconUrl:(NSString * _Nullable)iconUrl title:(NSString * _Nullable)title hasFill:(BOOL)hasFill hasStroke:(BOOL)hasStroke;
		[Export("initWithStyleID:strokeColor:fillColor:width:scale:heading:anchor:iconUrl:title:hasFill:hasStroke:")]
		IntPtr Constructor(string styleID, [NullAllowed] UIColor strokeColor, [NullAllowed] UIColor fillColor, nfloat width, nfloat scale, nfloat heading, CGPoint anchor, [NullAllowed] string iconUrl, [NullAllowed] string title, bool hasFill, bool hasStroke);
	}

	// @protocol GMUGeometryContainer <NSObject>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/
	[Protocol]
	[BaseType(typeof(NSObject))]
	interface GMUGeometryContainer
	{
		// @required @property (readonly, nonatomic) id<GMUGeometry> _Nonnull geometry;
		// [Abstract]
		[Export("geometry")]
		GMUGeometry Geometry { get; }

		// @required @property (nonatomic) GMUStyle * _Nullable style;
		// [Abstract]
		[NullAllowed, Export("style", ArgumentSemantic.Assign)]
		GMUStyle Style { get; set; }
	}

	// @interface GMUFeature : NSObject <GMUGeometryContainer>
	[BaseType(typeof(GMUGeometryContainer))]
	interface GMUFeature
	{
		// @property (readonly, nonatomic) NSString * _Nullable identifier;
		[NullAllowed, Export("identifier")]
		string Identifier { get; }

		// @property (readonly, nonatomic) NSDictionary<NSString *,NSString *> * _Nullable properties;
		[NullAllowed, Export("properties")]
		NSDictionary<NSString, NSString> Properties { get; }

		// @property (readonly, nonatomic) int * _Nullable boundingBox;
		[NullAllowed, Export("boundingBox")]
		CoordinateBounds BoundingBox { get; }

		// -(instancetype _Nonnull)initWithGeometry:(id<GMUGeometry> _Nonnull)geometry identifier:(NSString * _Nullable)identifier properties:(NSDictionary<NSString *,NSString *> * _Nullable)properties boundingBox:(id)boundingBox;
		[Export("initWithGeometry:identifier:properties:boundingBox:")]
		IntPtr Constructor(GMUGeometry geometry, [NullAllowed] string identifier, [NullAllowed] NSDictionary<NSString, NSString> properties, CoordinateBounds boundingBox);
	}

	// @interface GMUGeometryCollection : NSObject <GMUGeometry>
	[BaseType(typeof(GMUGeometry))]
	interface GMUGeometryCollection
	{
		// @property (readonly, nonatomic) NSArray<id<GMUGeometry>> * _Nonnull geometries;
		[Export("geometries")]
		GMUGeometry[] Geometries { get; }

		// -(instancetype _Nonnull)initWithGeometries:(NSArray<id<GMUGeometry>> * _Nonnull)geometries;
		[Export("initWithGeometries:")]
		IntPtr Constructor(GMUGeometry[] geometries);
	}

	// @interface GMUGroundOverlay : NSObject <GMUGeometry>
	[BaseType(typeof(GMUGeometry))]
	interface GMUGroundOverlay
	{
		// @property (readonly, nonatomic) CLLocationCoordinate2D northEast;
		[Export("northEast")]
		CLLocationCoordinate2D NorthEast { get; }

		// @property (readonly, nonatomic) CLLocationCoordinate2D southWest;
		[Export("southWest")]
		CLLocationCoordinate2D SouthWest { get; }

		// @property (readonly, nonatomic) int zIndex;
		[Export("zIndex")]
		int ZIndex { get; }

		// @property (readonly, nonatomic) double rotation;
		[Export("rotation")]
		double Rotation { get; }

		// @property (readonly, nonatomic) NSString * _Nonnull href;
		[Export("href")]
		string Href { get; }

		// -(instancetype _Nonnull)initWithCoordinate:(CLLocationCoordinate2D)northEast southWest:(CLLocationCoordinate2D)southWest zIndex:(int)zIndex rotation:(double)rotation href:(NSString * _Nonnull)href;
		[Export("initWithCoordinate:southWest:zIndex:rotation:href:")]
		IntPtr Constructor(CLLocationCoordinate2D northEast, CLLocationCoordinate2D southWest, int zIndex, double rotation, string href);
	}

	// @interface GMULineString : NSObject <GMUGeometry>
	[BaseType(typeof(GMUGeometry))]
	interface GMULineString
	{
		// @property (readonly, nonatomic) int * _Nonnull path;
		[Export("path")]
		Path Path { get; }

		// -(instancetype _Nonnull)initWithPath:(id)path;
		[Export("initWithPath:")]
		IntPtr Constructor(Path path);
	}

	// @interface GMUPlacemark : NSObject <GMUGeometryContainer>
	[BaseType(typeof(GMUGeometryContainer))]
	interface GMUPlacemark
	{
		// @property (readonly, nonatomic) NSString * _Nullable title;
		[NullAllowed, Export("title")]
		string Title { get; }

		// @property (readonly, nonatomic) NSString * _Nullable snippet;
		[NullAllowed, Export("snippet")]
		string Snippet { get; }

		// @property (readonly, nonatomic) NSString * _Nullable styleUrl;
		[NullAllowed, Export("styleUrl")]
		string StyleUrl { get; }

		// -(instancetype _Nonnull)initWithGeometry:(id<GMUGeometry> _Nullable)geometry title:(NSString * _Nullable)title snippet:(NSString * _Nullable)snippet style:(GMUStyle * _Nullable)style styleUrl:(NSString * _Nullable)styleUrl;
		[Export("initWithGeometry:title:snippet:style:styleUrl:")]
		IntPtr Constructor([NullAllowed] GMUGeometry geometry, [NullAllowed] string title, [NullAllowed] string snippet, [NullAllowed] GMUStyle style, [NullAllowed] string styleUrl);
	}

	// @interface GMUPoint : NSObject <GMUGeometry>
	[BaseType(typeof(GMUGeometry))]
	interface GMUPoint
	{
		// @property (readonly, nonatomic) CLLocationCoordinate2D coordinate;
		[Export("coordinate")]
		CLLocationCoordinate2D Coordinate { get; }

		// -(instancetype _Nonnull)initWithCoordinate:(CLLocationCoordinate2D)coordinate;
		[Export("initWithCoordinate:")]
		IntPtr Constructor(CLLocationCoordinate2D coordinate);
	}

	// @interface GMUPolygon : NSObject <GMUGeometry>
	[BaseType(typeof(GMUGeometry))]
	interface GMUPolygon
	{
		// @property (readonly, nonatomic) NSArray * _Nonnull paths;
		[Export("paths")]
		Path[] Paths { get; }

		// -(instancetype _Nonnull)initWithPaths:(NSArray * _Nonnull)paths;
		[Export("initWithPaths:")]
		IntPtr Constructor(Path[] paths);
	}
}
